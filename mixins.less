.show() { display: block; }
.hide() { display: none; }


.generate-font-face(@family:'',@source:'',@svg:'') 
{
	@font-face {
		font-family: @family;
		src: url('@{source}.eot');
		src: url('@{source}.eot?#iefix') format('embedded-opentype'),
			 url('@{source}.woff2') format('woff2'),
			 url('@{source}.woff') format('woff'),
			 url('@{source}.ttf') format('truetype'),
			 url('@{source}.svg#@{svg}') format('svg');
		font-weight: normal;
		font-style: normal;
	}
}


.mixin-dim-square(@size: 40)
{
	height:unit(@size,px);
	width:unit(@size,px);
}

.mixin-fullsize(@position:absolute,@z-index:10)
{
	position:@position;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index:@z-index;
}

.mixin-headline-underline(@color:black,@height:5,@margin-top:25,@margin-bottom:50,@width:25)
{
	&:after 
	{	content: '';
		margin: unit(@margin-top,px) auto unit(@margin-bottom,px);
		width: unit(@width,%);
		height: unit(@height,px);
		background-color: @color;
		display: block;
		.property-border-radius((@height / 2),px);

	}
}

.mixin-multicolumn(@cols:3, @rule-width: 0, @rule-style: solid, @rule-color: #2a2a2a)
{
	-moz-column-count: @cols;
	-webkit-column-count: @cols;
	column-count: @cols;

	-moz-column-width: unit((100 / @cols),%); /* Firefox */
	-webkit-column-width: unit((100 / @cols),%); /* webkit, Safari, Chrome */
	column-width: unit((100 / @cols),%);

	
	.rule() when (@rule-width > 0) {
		-moz-column-rule: unit(@rule-width,px) @rule-style @rule-color;
		-webkit-column-rule: unit(@rule-width,px) @rule-style @rule-color;
		-o-column-rule: unit(@rule-width,px) @rule-style @rule-color;
		-ms-column-rule: unit(@rule-width,px) @rule-style @rule-color;
	}
	.rule();
}

.mixin-position(@width:-1,@height:-1,@top:-1,@right:-1,@bottom:-1,@left:-1,@z-index:10,@position:absolute)
{
	.this-bottom(@bottom) when not (@bottom = -1) {
		bottom: @bottom;
	}
	.this-height(@height) when not (@height = -1) {
		height: @height;
	}
	.this-left(@left) when not (@left = -1) {
		left: @left;
	}
	.this-right(@right) when not (@right = -1) {
		right: @right;
	}
	.this-top(@top) when not (@top = -1) {
		top: @top;
	}
	.this-width(@width) when not (@width = -1) {
		width: @width;
	}
	
	.this-width(@width);
	.this-height(@height);
	.this-top(@top);
	.this-right(@right);
	.this-bottom(@bottom);
	.this-left(@left);
	position: @position;
	z-index: @z-index;
}




.property-border-radius(@radius: 5,@unit:px) 
{
	-webkit-border-radius:  unit(@radius,@unit);
	-moz-border-radius:     unit(@radius,@unit);
	border-radius:          unit(@radius,@unit);

	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}

.property-border-radiuses(@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0,@unit:px) {
	-webkit-border-top-right-radius:	unit(@topright,@unit);
	-webkit-border-bottom-right-radius:	unit(@bottomright,@unit);
	-webkit-border-bottom-left-radius:	unit(@bottomleft,@unit);
	-webkit-border-top-left-radius:		unit(@topleft,@unit);

	-moz-border-radius-topright:		unit(@topright,@unit);
	-moz-border-radius-bottomright:		unit(@bottomright,@unit);
	-moz-border-radius-bottomleft:		unit(@bottomleft,@unit);
	-moz-border-radius-topleft:			unit(@topleft,@unit);

	border-top-right-radius:			unit(@topright,@unit);
	border-bottom-right-radius:			unit(@bottomright,@unit);
	border-bottom-left-radius:			unit(@bottomleft,@unit);
	border-top-left-radius:				unit(@topleft,@unit);

	-moz-background-clip:				padding; 
	-webkit-background-clip:			padding-box; 
	background-clip:					padding-box; 
}

.property-filter(@value1,@value2:X,...)
{
    @value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	
	-webkit-filter: @value;
	-moz-filter: @value;
	-o-filter: @value;
	-ms-filter:@value;
	filter: @value;
}

.property-lightbox()
{
	-moz-background-clip: padding;     /* Firefox 3.6 */
	-webkit-background-clip: padding;  /* Safari 4? Chrome 6? */
	background-clip: padding-box;      /* Firefox 4, Safari 5, Opera 10, IE 9 */
}

.property-opacity(@opacity: 100)
{
    @opacityStandard: @opacity / 100;
    @opacityFilter: @opacity;
    opacity: @opacityStandard;      /* modern browser */  
    -moz-opacity: @opacityStandard; /* older Mozilla browser */  
    -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(Opacity=@{opacityFilter})"; /* IE8 in Standard Compliant Mode */  
    filter: ~"alpha(opacity = @{opacityFilter})"; /* IE5.x -7.0 */  
}

.property-pointer-events(@value) 
{
	//The pointer-events property allows for control over how HTML elements respond to mouse/touch events â€“ 
	//including CSS hover/active states, click/tap events in Javascript, and whether or not the cursor is visible. 
	//values: visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none | inherit
	-webkit-pointer-events: @value;
	pointer-events: @value;
}


.property-shadow-box(@opacity:50, @blur:5, @spread:1, @horizontal:0,@vertical:0, @color:#2a2a2a)
{	
	-webkit-box-shadow: unit(@horizontal,px) unit(@vertical,px) unit(@blur,px) unit(@spread,px) rgba(red(@color), green(@color), blue(@color), @opacity / 100);
	-moz-box-shadow: unit(@horizontal,px) unit(@vertical,px) unit(@blur,px) unit(@spread,px) rgba(red(@color), green(@color), blue(@color), @opacity / 100);
	box-shadow: unit(@horizontal,px) unit(@vertical,px) unit(@blur,px) unit(@spread,px) rgba(red(@color), green(@color), blue(@color), @opacity / 100);
}

.property-shadow-text(@value1,@value2:X,...) 
{
	@value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	text-shadow: @value;
}

.property-transition(@value1,@value2:X,...)
{
    @value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;

    -webkit-transition: @value;
    -moz-transition: @value;
    -ms-transition: @value;
    -o-transition: @value;
    transition: @value;
}

.property-user-select(@value) 
{
	//Specifies whether the text of the element can be selected.
	//values: all | inherit | none | text | toggle
	-webkit-user-select: @value;
	-moz-user-select: @value;
	user-select: @value;
}